// Generated by CoffeeScript 1.3.3
(function() {
  var SocialReq, async;

  async = require('async');

  SocialReq = function() {
    var self;
    self = this;
    this.services = {};
    this.serviceModules = {};
    this.use = function(service, keys) {
      self.services[service] = keys;
      self.serviceModules[service] = new (require('./modules/' + service))(keys);
      return self;
    };
    this._getTokens = {};
    this.getTokens = function(fn) {
      return self._getTokens = fn;
    };
  };

  SocialReq.prototype.get = function(id, scopes, done) {
    var getServiceRequestFunction, self;
    self = this;
    getServiceRequestFunction = function(service, scope, tokens) {
      return function(cb) {
        if (self.serviceModules[service].requestFunctions[scope]) {
          return self.serviceModules[service].requestFunctions[scope](tokens, cb);
        } else {
          return cb(null, null);
        }
      };
    };
    return self._getTokens(id, function(tokens) {
      var getFunctions, pushGetFunction, scope, services;
      getFunctions = {};
      pushGetFunction = function(scope, services) {
        return getFunctions[scope] = function(cb) {
          var parseService, pushServiceRequestFunction, service, serviceList, serviceRequestFunctions, _i, _j, _len, _len1;
          serviceList = [];
          parseService = function(service) {
            var keys, serviceName, _ref, _results;
            if (service === '*') {
              serviceList = [];
              _ref = self.services;
              _results = [];
              for (service in _ref) {
                keys = _ref[service];
                _results.push(serviceList.push(service));
              }
              return _results;
            } else if (service.indexOf('-') === 0) {
              serviceName = service.slice(1, service.length + 1 || 9e9);
              return serviceList.splice(serviceList.indexOf(serviceName), 1);
            } else {
              if (serviceList.indexOf(service) === -1) {
                return serviceList.push(service);
              }
            }
          };
          for (_i = 0, _len = services.length; _i < _len; _i++) {
            service = services[_i];
            parseService(service);
          }
          serviceRequestFunctions = {};
          pushServiceRequestFunction = function(service) {
            return serviceRequestFunctions[service] = getServiceRequestFunction(service, scope, tokens[service]);
          };
          for (_j = 0, _len1 = serviceList.length; _j < _len1; _j++) {
            service = serviceList[_j];
            pushServiceRequestFunction(service);
          }
          return async.parallel(serviceRequestFunctions, function(err, results) {
            return cb(err, results);
          });
        };
      };
      for (scope in scopes) {
        services = scopes[scope];
        pushGetFunction(scope, services);
      }
      return async.parallel(getFunctions, function(err, results) {
        if (err) {
          return done(err);
        }
        return done(err, results);
      });
    });
  };

  module.exports = SocialReq;

}).call(this);
