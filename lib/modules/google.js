// Generated by CoffeeScript 1.3.3
(function() {
  var OAuth2, async, googleClient, request;

  async = require('async');

  OAuth2 = require('oauth').OAuth2;

  request = require('request');

  googleClient = function(keys) {
    var oa, self;
    self = this;
    this.clientId = keys.clientId;
    this.clientSecret = keys.clientSecret;
    oa = new OAuth2;
    this.requestFunctions = {
      contacts: function(tokens, cb) {
        return oa._request('get', 'https://www.google.com/m8/feeds/contacts/default/full?alt=json&max-results=10000', {
          'GData-Version': '3.0'
        }, '', tokens.access_token, function(err, data, res) {
          var getPrimaryEmail;
          if (err != null) {
            err.code = err.statusCode;
            err.message = err.data;
            return cb(null, {
              error: err
            });
          }
          getPrimaryEmail = function(contact, cb) {
            var emails;
            emails = contact.entry['gd$email'];
            if (!(emails != null)) {
              return cb(null, contact);
            }
            return async.detect(emails, function(email, cb) {
              return cb(email.primary);
            }, function(primaryEmail) {
              contact.email = primaryEmail ? primaryEmail.address : null;
              return cb(null, contact);
            });
          };
          data = JSON.parse(data);
          return async.map(data.feed.entry, function(entry, cb) {
            var contact;
            contact = {
              entry: entry,
              fullname: (entry['gd$name'] != null) && (entry['gd$name']['gd$fullName'] != null) ? entry['gd$name']['gd$fullName']['$t'] : null
            };
            return getPrimaryEmail(contact, cb);
          }, cb);
        });
      },
      details: function(tokens, cb) {
        return oa._request('get', 'https://www.googleapis.com/oauth2/v1/userinfo?alt=json', {
          'GData-Version': '3.0'
        }, '', tokens.access_token, function(err, data, res) {
          if (err != null) {
            return cb(null, {
              error: JSON.parse(err.data).error
            });
          }
          return cb(null, JSON.parse(data));
        });
      },
      tokens: function(tokens, cb) {
        var tokenForm;
        tokenForm = {
          refresh_token: tokens.refresh_token,
          client_id: self.clientId,
          client_secret: self.clientSecret,
          grant_type: 'refresh_token'
        };
        return request.post('https://accounts.google.com/o/oauth2/token', {
          form: tokenForm
        }, function(err, response, body) {
          var error;
          if (err != null) {
            return cb(null, {
              error: err.data || err
            });
          }
          body = JSON.parse(body);
          if (body.error != null) {
            error = {
              message: body.error,
              code: response.statusCode
            };
            return cb(null, {
              error: error
            });
          }
          return cb(null, body);
        });
      }
    };
  };

  module.exports = googleClient;

}).call(this);
